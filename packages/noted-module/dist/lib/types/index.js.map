{"version":3,"sources":["../../../src/lib/types/index.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Field types supported by the form generator\nexport type FieldType =\n  | 'text'\n  | 'textarea'\n  | 'email'\n  | 'url'\n  | 'tags'\n  | 'number'\n  | 'select'\n  | 'checkbox'\n  | 'date'\n  | 'links'\n  | 'images'\n  | 'project-select';\n\n// Base field configuration\nexport interface BaseFieldConfig {\n  key: string;\n  label: string;\n  type: FieldType;\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n  disabled?: boolean;\n  autoFocus?: boolean;\n}\n\n// Text field specific configuration\nexport interface TextFieldConfig extends BaseFieldConfig {\n  type: 'text' | 'email' | 'url';\n  maxLength?: number;\n  minLength?: number;\n  pattern?: string;\n}\n\n// Textarea field configuration\nexport interface TextAreaFieldConfig extends BaseFieldConfig {\n  type: 'textarea';\n  rows?: number;\n  maxLength?: number;\n  minLength?: number;\n}\n\n// Tags field configuration\nexport interface TagsFieldConfig extends BaseFieldConfig {\n  type: 'tags';\n  maxTags?: number;\n  allowCustomTags?: boolean;\n  suggestions?: string[];\n}\n\n// Select field configuration\nexport interface SelectFieldConfig extends BaseFieldConfig {\n  type: 'select';\n  options: Array<{ label: string; value: string }>;\n  multiple?: boolean;\n}\n\n// Number field configuration\nexport interface NumberFieldConfig extends BaseFieldConfig {\n  type: 'number';\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\n// Links field configuration\nexport interface LinksFieldConfig extends BaseFieldConfig {\n  type: 'links';\n  maxLinks?: number;\n  allowTitleEdit?: boolean;\n  allowDescriptionEdit?: boolean;\n}\n\n// Images field configuration\nexport interface ImagesFieldConfig extends BaseFieldConfig {\n  type: 'images';\n  maxFiles?: number;\n  maxFileSize?: number; // in bytes\n  allowedTypes?: string[];\n  allowCaptions?: boolean;\n}\n\n// Project select field configuration\nexport interface ProjectSelectFieldConfig extends BaseFieldConfig {\n  type: 'project-select';\n  allowCustom?: boolean;\n  placeholder?: string;\n}\n\n// Union of all field configurations\nexport type FieldConfig =\n  | TextFieldConfig\n  | TextAreaFieldConfig\n  | TagsFieldConfig\n  | SelectFieldConfig\n  | NumberFieldConfig\n  | LinksFieldConfig\n  | ImagesFieldConfig\n  | ProjectSelectFieldConfig\n  | BaseFieldConfig;\n\n// Form schema configuration\nexport interface FormSchema {\n  title: string;\n  description?: string;\n  fields: FieldConfig[];\n  submitText?: string;\n  resetText?: string;\n  successMessage?: string;\n  table: string; // Supabase table name\n  autoFields?: {\n    user_id?: boolean; // Auto-add auth.uid()\n    created_at?: boolean; // Auto-add timestamp\n    updated_at?: boolean; // Auto-add timestamp\n  };\n}\n\n// Link object type\nexport interface LinkObject {\n  url: string;\n  title?: string;\n  description?: string;\n}\n\n// Image object type\nexport interface ImageObject {\n  url: string;\n  alt?: string;\n  caption?: string;\n  filename?: string;\n  size?: number;\n  type?: string;\n}\n\n// Field value types\nexport type FieldValue =\n  | string\n  | number\n  | boolean\n  | string[]\n  | Date\n  | LinkObject[]\n  | ImageObject[]\n  | null\n  | undefined;\n\n// Form submission data\nexport type FormData<\n  T extends Record<string, unknown> = Record<string, unknown>,\n> = T;\n\n// Form state\nexport interface FormState<\n  T extends Record<string, unknown> = Record<string, unknown>,\n> {\n  isSubmitting: boolean;\n  isSuccess: boolean;\n  error: string | null;\n  data: FormData<T>;\n}\n\n// Validation result\nexport interface ValidationResult<\n  T extends Record<string, unknown> = Record<string, unknown>,\n> {\n  success: boolean;\n  data?: FormData<T>;\n  errors?: Record<string, string>;\n}\n\n// Form generator props\nexport interface FormGeneratorProps<\n  T extends Record<string, unknown> = Record<string, unknown>,\n> {\n  schema: FormSchema;\n  onSubmit?: (data: FormData<T>) => Promise<void>;\n  onSuccess?: (data: FormData<T>) => void;\n  onError?: (error: string) => void;\n  className?: string;\n  disabled?: boolean;\n  defaultValues?: Partial<FormData<T>>;\n}\n\n// Field component props\nexport interface FieldProps {\n  config: FieldConfig;\n  value: FieldValue;\n  onChange: (value: FieldValue) => void;\n  error?: string;\n  disabled?: boolean;\n}\n\n// Zod schema generation utility types\nexport type ZodSchemaType = z.ZodTypeAny;\nexport type GeneratedSchema<\n  T extends Record<string, unknown> = Record<string, unknown>,\n> = z.ZodObject<{ [K in keyof T]: z.ZodTypeAny }>;\n\n// Noted-specific data type\nexport interface NotedData extends Record<string, unknown> {\n  title: string;\n  description: string;\n  project_name?: string;\n  tags: string[];\n  links: LinkObject[];\n  images: ImageObject[];\n  screenshots: ImageObject[];\n}\n\n// Database noted type with additional fields\nexport interface DbNoted extends NotedData {\n  id: number;\n  user_id: string;\n  created_at: string;\n  updated_at: string;\n}"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}