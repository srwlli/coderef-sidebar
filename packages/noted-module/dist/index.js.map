{"version":3,"sources":["../src/index.ts","../src/components/NotedForm.tsx","../src/components/FormGenerator.tsx","../src/components/ui/button.tsx","../src/lib/utils.ts","../src/lib/forms/validation.ts","../src/components/fields/TextField.tsx","../src/components/ui/input.tsx","../src/components/fields/BaseField.tsx","../src/components/fields/TextAreaField.tsx","../src/components/ui/textarea.tsx","../src/components/fields/TagField.tsx","../src/components/ui/badge.tsx","../src/components/fields/LinksField.tsx","../src/components/ui/label.tsx","../src/components/fields/ImagesField.tsx","../src/components/fields/ProjectSelectField.tsx","../src/components/ui/dropdown-menu.tsx","../src/lib/forms/notedSchema.ts"],"sourcesContent":["// Main exports\nexport { NotedForm } from './components/NotedForm';\nexport { FormGenerator } from './components/FormGenerator';\n\n// Form configuration\nexport { notedFormSchema, getNotedFormSchema, getNotedEditFormSchema } from './lib/forms/notedSchema';\n\n// Types\nexport type {\n  NotedData,\n  DbNoted,\n  FormSchema,\n  FieldConfig,\n  LinkObject,\n  ImageObject,\n} from './lib/types';\n\n// Field components (for custom usage)\nexport * from './components/fields';\n\n// Utilities\nexport { generateZodSchema, validateFormData, prepareSupabaseData } from './lib/forms/validation';\nexport { cn } from './lib/utils';","'use client';\n\nimport React, { useState } from 'react';\nimport { FormGenerator } from './FormGenerator';\nimport { notedFormSchema } from '../lib/forms/notedSchema';\nimport { NotedData, DbNoted } from '../lib/types';\n\ninterface NotedFormProps {\n  onSuccess?: (data: NotedData) => void;\n  onCancel?: () => void;\n  className?: string;\n  initialData?: DbNoted; // For editing\n  mode?: 'create' | 'edit';\n  // Required integrations\n  supabaseClient: any;\n  user: any;\n  toast: (config: { title: string; description: string; type: 'success' | 'error' | 'info' }) => void;\n}\n\nexport function NotedForm({\n  onSuccess,\n  onCancel,\n  className,\n  initialData,\n  mode = 'create',\n  supabaseClient,\n  user,\n  toast,\n}: NotedFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (data: NotedData) => {\n    setIsSubmitting(true);\n\n    try {\n      // Check if Supabase is configured\n      if (!supabaseClient) {\n        throw new Error('Supabase client is not provided');\n      }\n\n      // Check if user is authenticated\n      if (!user) {\n        throw new Error('You must be logged in to save a note');\n      }\n\n      if (mode === 'edit' && initialData) {\n        // Edit mode\n        const { data: updateData, error } = await supabaseClient\n          .from('noted')\n          .update({\n            title: data.title,\n            description: data.description,\n            project_name: data.project_name || null,\n            tags: data.tags || [],\n            links: data.links || [],\n            images: data.images || [],\n            screenshots: data.screenshots || [],\n          })\n          .eq('id', initialData.id)\n          .eq('user_id', user.id) // Ensure user can only update their own notes\n          .select()\n          .single();\n\n        if (error) {\n          throw error;\n        }\n\n        toast({\n          title: 'Success',\n          description: 'Note updated successfully!',\n          type: 'success',\n        });\n\n        onSuccess?.(updateData);\n      } else {\n        // Create mode\n        const userMetadata =\n          user && 'user_metadata' in user\n            ? (user as any & { user_metadata?: { display_name?: string } })\n                .user_metadata\n            : undefined;\n\n        const noteWithUser = {\n          ...data,\n          user_id: user.id,\n          tags: data.tags || [],\n          links: data.links || [],\n          images: data.images || [],\n          screenshots: data.screenshots || [],\n        };\n\n        const { data: insertedData, error } = await supabaseClient\n          .from('noted')\n          .insert([noteWithUser])\n          .select()\n          .single();\n\n        if (error) {\n          throw error;\n        }\n\n        toast({\n          title: 'Success',\n          description: notedFormSchema.successMessage || 'Note saved successfully!',\n          type: 'success',\n        });\n\n        onSuccess?.(insertedData);\n      }\n    } catch (error: unknown) {\n      console.error(`Note ${mode} error:`, error);\n\n      toast({\n        title: 'Error',\n        description:\n          (error as Error)?.message ||\n          `Failed to ${mode} note. Please try again.`,\n        type: 'error',\n      });\n\n      throw error;\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleReset = () => {\n    if (mode === 'edit') {\n      onCancel?.();\n    } else {\n      toast({\n        title: 'Form Reset',\n        description: 'Form has been cleared.',\n        type: 'info',\n      });\n    }\n  };\n\n  // Convert DbNoted to NotedData for form\n  const formInitialData = initialData\n    ? {\n        title: initialData.title,\n        description: initialData.description,\n        project_name: initialData.project_name || '',\n        tags: initialData.tags || [],\n        links: initialData.links || [],\n        images: initialData.images || [],\n        screenshots: initialData.screenshots || [],\n      }\n    : undefined;\n\n  return (\n    <FormGenerator<NotedData>\n      schema={notedFormSchema}\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n      disabled={isSubmitting}\n      className={className}\n      initialData={formInitialData}\n      supabaseClient={supabaseClient}\n      user={user}\n    />\n  );\n}","'use client';\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from './ui/button';\nimport {\n  FormSchema,\n  FieldConfig,\n  TextFieldConfig,\n  TextAreaFieldConfig,\n  TagsFieldConfig,\n  LinksFieldConfig,\n  ImagesFieldConfig,\n  ProjectSelectFieldConfig,\n} from '../lib/types';\nimport {\n  generateZodSchema,\n  getDefaultValues,\n  prepareSupabaseData,\n} from '../lib/forms/validation';\nimport { TextField } from './fields/TextField';\nimport { TextAreaField } from './fields/TextAreaField';\nimport { TagField } from './fields/TagField';\nimport { LinksField } from './fields/LinksField';\nimport { ImagesField } from './fields/ImagesField';\nimport { ProjectSelectField } from './fields/ProjectSelectField';\nimport { cn } from '../lib/utils';\nimport { Loader2, FolderOpen, Tag, Link, Plus, Image, Camera } from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from './ui/dropdown-menu';\n\ninterface FormGeneratorProps<\n  T extends Record<string, unknown> = Record<string, unknown>,\n> {\n  schema: FormSchema;\n  onSubmit: (data: T) => Promise<void>;\n  onReset?: () => void;\n  className?: string;\n  disabled?: boolean;\n  initialData?: T;\n  // Optional props for integrations\n  supabaseClient?: any;\n  user?: any;\n}\n\nexport function FormGenerator<\n  T extends Record<string, unknown> = Record<string, unknown>,\n>({\n  schema,\n  onSubmit,\n  onReset,\n  className,\n  disabled = false,\n  initialData,\n  supabaseClient,\n  user,\n}: FormGeneratorProps<T>) {\n  const zodSchema = generateZodSchema(schema.fields);\n  const defaultValues = initialData || getDefaultValues(schema.fields);\n\n  const {\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    formState: { errors, isSubmitting },\n  } = useForm({\n    resolver: zodResolver(zodSchema),\n    defaultValues,\n  });\n\n  const watchedValues = watch();\n\n  const renderInlineField = (field: FieldConfig) => {\n    const value = watchedValues[field.key];\n\n    const getIcon = () => {\n      switch (field.key) {\n        case 'project_name': return <FolderOpen className=\"h-4 w-4\" />;\n        case 'tags': return <Tag className=\"h-4 w-4\" />;\n        case 'links': return <Link className=\"h-4 w-4\" />;\n        case 'images': return <Image className=\"h-4 w-4\" />;\n        case 'screenshots': return <Camera className=\"h-4 w-4\" />;\n        default: return <Plus className=\"h-4 w-4\" />;\n      }\n    };\n\n    const getDisplayText = () => {\n      switch (field.key) {\n        case 'project_name':\n          return value ? `Project: ${value}` : 'Add Project';\n        case 'tags':\n          return Array.isArray(value) && value.length > 0\n            ? `Tags (${value.length})`\n            : 'Add Tags';\n        case 'links':\n          return Array.isArray(value) && value.length > 0\n            ? `Links (${value.length})`\n            : 'Add Links';\n        case 'images':\n          return Array.isArray(value) && value.length > 0\n            ? `Images (${value.length})`\n            : 'Add Images';\n        case 'screenshots':\n          return Array.isArray(value) && value.length > 0\n            ? `Screenshots (${value.length})`\n            : 'Add Screenshots';\n        default:\n          return field.label;\n      }\n    };\n\n    return (\n      <DropdownMenu key={field.key}>\n        <DropdownMenuTrigger asChild>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 gap-2 text-muted-foreground hover:text-foreground\"\n          >\n            {getIcon()}\n            <span className=\"text-xs\">{getDisplayText()}</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-80 p-4\" align=\"start\">\n          <div className=\"space-y-2\">\n            {renderField(field)}\n          </div>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  };\n\n  const renderField = (field: FieldConfig) => {\n    const value = watchedValues[field.key];\n    const error = errors[field.key]?.message as string;\n\n    const commonProps = {\n      error,\n      disabled: disabled || isSubmitting,\n    };\n\n    switch (field.type) {\n      case 'text':\n      case 'email':\n      case 'url':\n        return (\n          <TextField\n            {...commonProps}\n            config={field as TextFieldConfig}\n            value={typeof value === 'string' ? value : ''}\n            onChange={(newValue) => setValue(field.key, newValue)}\n          />\n        );\n\n      case 'textarea':\n        return (\n          <TextAreaField\n            {...commonProps}\n            config={field as TextAreaFieldConfig}\n            value={typeof value === 'string' ? value : ''}\n            onChange={(newValue) => setValue(field.key, newValue)}\n          />\n        );\n\n      case 'tags':\n        return (\n          <TagField\n            {...commonProps}\n            config={field as TagsFieldConfig}\n            value={Array.isArray(value) ? value : []}\n            onChange={(newValue) => setValue(field.key, newValue)}\n          />\n        );\n\n      case 'links':\n        return (\n          <LinksField\n            {...commonProps}\n            config={field as LinksFieldConfig}\n            value={Array.isArray(value) ? value : []}\n            onChange={(newValue) => setValue(field.key, newValue)}\n          />\n        );\n\n      case 'images':\n        return (\n          <ImagesField\n            {...commonProps}\n            config={field as ImagesFieldConfig}\n            value={Array.isArray(value) ? value : []}\n            onChange={(newValue) => setValue(field.key, newValue)}\n          />\n        );\n\n      case 'project-select':\n        return (\n          <ProjectSelectField\n            {...commonProps}\n            config={field as ProjectSelectFieldConfig}\n            value={typeof value === 'string' ? value : ''}\n            onChange={(newValue) => setValue(field.key, newValue)}\n            supabaseClient={supabaseClient}\n            user={user}\n          />\n        );\n\n      default:\n        console.warn(`Unsupported field type: ${field.type}`);\n        return null;\n    }\n  };\n\n  const handleFormSubmit = async (data: Record<string, unknown>) => {\n    try {\n      const supabaseData = prepareSupabaseData(data, schema);\n      await onSubmit(supabaseData as T);\n    } catch (error) {\n      console.error('Form submission error:', error);\n      throw error;\n    }\n  };\n\n  const handleReset = () => {\n    reset(defaultValues);\n    onReset?.();\n  };\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Form header */}\n      <div className=\"space-y-3\">\n        {/* Title and description - only show if they exist */}\n        {(schema.title || schema.description) && (\n          <div className=\"space-y-2\">\n            {schema.title && (\n              <h2 className=\"text-2xl font-semibold\">{schema.title}</h2>\n            )}\n            {schema.description && (\n              <p className=\"text-muted-foreground\">{schema.description}</p>\n            )}\n          </div>\n        )}\n\n        {/* Inline actions bar */}\n        <div className=\"flex items-center gap-2 p-3 bg-muted/30 rounded-lg border\">\n          {schema.fields\n            .filter((field) => ['project_name', 'tags', 'links', 'images', 'screenshots'].includes(field.key))\n            .map((field) => renderInlineField(field))}\n        </div>\n      </div>\n\n      {/* Form */}\n      <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6\">\n        {/* Main content fields */}\n        <div className=\"space-y-4\">\n          {schema.fields\n            .filter((field) => !['project_name', 'tags', 'links', 'images', 'screenshots'].includes(field.key))\n            .map((field) => (\n              <div key={field.key}>{renderField(field)}</div>\n            ))}\n        </div>\n\n        {/* Form actions */}\n        <div className=\"flex justify-end items-center gap-1 pt-4\">\n          {schema.resetText && (\n            <>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleReset}\n                disabled={disabled || isSubmitting}\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                {schema.resetText}\n              </Button>\n              <span className=\"text-muted-foreground\">|</span>\n            </>\n          )}\n          <Button\n            type=\"submit\"\n            variant=\"ghost\"\n            size=\"sm\"\n            disabled={disabled || isSubmitting}\n            className=\"text-muted-foreground hover:text-foreground\"\n          >\n            {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            {isSubmitting ? 'Submitting...' : schema.submitText || 'Submit'}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '../../lib/utils';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };","import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}","import { z } from 'zod';\nimport { FieldConfig, FormSchema, GeneratedSchema } from '../types';\n\n/**\n * Generate Zod schema from form field configurations\n */\nexport function generateZodSchema(fields: FieldConfig[]): GeneratedSchema {\n  const schemaFields: Record<string, z.ZodTypeAny> = {};\n\n  fields.forEach((field) => {\n    let fieldSchema: z.ZodTypeAny;\n\n    // Base schema based on field type\n    switch (field.type) {\n      case 'text':\n      case 'email':\n      case 'url':\n        // Start with base string schema with length validations\n        fieldSchema = z.string();\n\n        // Add length validations first\n        if ('maxLength' in field && field.maxLength) {\n          fieldSchema = (fieldSchema as z.ZodString).max(\n            field.maxLength,\n            `Maximum ${field.maxLength} characters`\n          );\n        }\n        if ('minLength' in field && field.minLength) {\n          fieldSchema = (fieldSchema as z.ZodString).min(\n            field.minLength,\n            `Minimum ${field.minLength} characters`\n          );\n        }\n\n        // Add pattern validation\n        if ('pattern' in field && field.pattern) {\n          fieldSchema = (fieldSchema as z.ZodString).regex(\n            new RegExp(field.pattern),\n            'Invalid format'\n          );\n        }\n\n        // Add type-specific validation last\n        if (field.type === 'email') {\n          fieldSchema = (fieldSchema as z.ZodString).email(\n            'Please enter a valid email address'\n          );\n        } else if (field.type === 'url') {\n          fieldSchema = (fieldSchema as z.ZodString)\n            .url('Please enter a valid URL')\n            .or(z.literal(''));\n        }\n        break;\n\n      case 'textarea':\n        fieldSchema = z.string();\n\n        // Add length validations for textarea\n        if ('maxLength' in field && field.maxLength) {\n          fieldSchema = (fieldSchema as z.ZodString).max(\n            field.maxLength,\n            `Maximum ${field.maxLength} characters`\n          );\n        }\n        if ('minLength' in field && field.minLength) {\n          fieldSchema = (fieldSchema as z.ZodString).min(\n            field.minLength,\n            `Minimum ${field.minLength} characters`\n          );\n        }\n        break;\n\n      case 'number':\n        fieldSchema = z.number();\n\n        // Add number validations\n        if ('min' in field && field.min !== undefined) {\n          fieldSchema = (fieldSchema as z.ZodNumber).min(\n            field.min,\n            `Minimum value is ${field.min}`\n          );\n        }\n        if ('max' in field && field.max !== undefined) {\n          fieldSchema = (fieldSchema as z.ZodNumber).max(\n            field.max,\n            `Maximum value is ${field.max}`\n          );\n        }\n        break;\n\n      case 'tags':\n        fieldSchema = z.array(z.string()).default([]);\n\n        // Add max tags validation using refine for custom validation\n        if ('maxTags' in field && field.maxTags) {\n          fieldSchema = fieldSchema.refine(\n            (tags: unknown) =>\n              Array.isArray(tags) && tags.length <= field.maxTags!,\n            { message: `Maximum ${field.maxTags} tags allowed` }\n          );\n        }\n        break;\n\n      case 'links':\n        fieldSchema = z.array(z.object({\n          url: z.string().url('Please enter a valid URL'),\n          title: z.string().optional(),\n          description: z.string().optional(),\n        })).default([]);\n\n        // Add max links validation\n        if ('maxLinks' in field && field.maxLinks) {\n          fieldSchema = fieldSchema.refine(\n            (links: unknown) =>\n              Array.isArray(links) && links.length <= field.maxLinks!,\n            { message: `Maximum ${field.maxLinks} links allowed` }\n          );\n        }\n        break;\n\n      case 'images':\n        fieldSchema = z.array(z.object({\n          url: z.string().url('Please enter a valid URL'),\n          alt: z.string().optional(),\n          caption: z.string().optional(),\n          filename: z.string().optional(),\n          size: z.number().optional(),\n          type: z.string().optional(),\n        })).default([]);\n\n        // Add max files validation\n        if ('maxFiles' in field && field.maxFiles) {\n          fieldSchema = fieldSchema.refine(\n            (files: unknown) =>\n              Array.isArray(files) && files.length <= field.maxFiles!,\n            { message: `Maximum ${field.maxFiles} files allowed` }\n          );\n        }\n        break;\n\n      case 'project-select':\n        fieldSchema = z.string();\n        break;\n\n      case 'select':\n        if ('multiple' in field && field.multiple) {\n          fieldSchema = z.array(z.string()).default([]);\n        } else {\n          fieldSchema = z.string();\n        }\n        break;\n\n      case 'checkbox':\n        fieldSchema = z.boolean().default(false);\n        break;\n\n      case 'date':\n        fieldSchema = z.string().or(z.date());\n        break;\n\n      default:\n        fieldSchema = z.string();\n    }\n\n    // Make field optional if not required\n    if (!field.required) {\n      if (\n        field.type === 'tags' ||\n        field.type === 'links' ||\n        field.type === 'images' ||\n        (field.type === 'select' && 'multiple' in field && field.multiple)\n      ) {\n        // Arrays default to empty array\n        fieldSchema = fieldSchema.optional().default([]);\n      } else if (field.type === 'checkbox') {\n        // Booleans default to false\n        fieldSchema = fieldSchema.optional().default(false);\n      } else {\n        // Strings can be empty\n        fieldSchema = fieldSchema.optional().or(z.literal(''));\n      }\n    } else {\n      // Required field validation\n      if (field.type === 'tags' || field.type === 'links' || field.type === 'images') {\n        fieldSchema = fieldSchema.refine(\n          (items: unknown) => Array.isArray(items) && items.length > 0,\n          { message: `${field.label} is required` }\n        );\n      } else if (\n        field.type === 'select' &&\n        'multiple' in field &&\n        field.multiple\n      ) {\n        fieldSchema = (fieldSchema as z.ZodArray<z.ZodString>).min(\n          1,\n          `${field.label} is required`\n        );\n      } else if (field.type !== 'checkbox') {\n        fieldSchema = (fieldSchema as z.ZodString).min(\n          1,\n          `${field.label} is required`\n        );\n      }\n    }\n\n    schemaFields[field.key] = fieldSchema;\n  });\n\n  return z.object(schemaFields) as GeneratedSchema;\n}\n\n/**\n * Validate form data against schema\n */\nexport function validateFormData<T extends Record<string, unknown>>(\n  data: Record<string, unknown>,\n  schema: GeneratedSchema<T>\n) {\n  try {\n    const result = schema.parse(data);\n    return { success: true, data: result };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errors: Record<string, string> = {};\n      error.issues.forEach((err: z.ZodIssue) => {\n        const path = err.path.join('.');\n        errors[path] = err.message;\n      });\n      return { success: false, errors };\n    }\n    return { success: false, errors: { _form: 'Validation failed' } };\n  }\n}\n\n/**\n * Prepare data for Supabase insertion\n */\nexport function prepareSupabaseData(\n  formData: Record<string, unknown>,\n  schema: FormSchema\n): Record<string, unknown> {\n  const supabaseData = { ...formData };\n\n  // Add auto fields if configured\n  if (schema.autoFields?.user_id) {\n    // Note: user_id will be handled in the submission function with auth.uid()\n    delete supabaseData.user_id; // Remove if accidentally included\n  }\n\n  if (schema.autoFields?.created_at) {\n    delete supabaseData.created_at; // Let Supabase handle with DEFAULT NOW()\n  }\n\n  if (schema.autoFields?.updated_at) {\n    delete supabaseData.updated_at; // Let Supabase handle with DEFAULT NOW()\n  }\n\n  // Convert empty strings to null for optional fields\n  Object.keys(supabaseData).forEach((key) => {\n    if (supabaseData[key] === '') {\n      supabaseData[key] = null;\n    }\n  });\n\n  return supabaseData;\n}\n\n/**\n * Get default values for form based on schema\n */\nexport function getDefaultValues(\n  fields: FieldConfig[]\n): Record<string, unknown> {\n  const defaults: Record<string, unknown> = {};\n\n  fields.forEach((field) => {\n    switch (field.type) {\n      case 'tags':\n      case 'links':\n      case 'images':\n        defaults[field.key] = [];\n        break;\n      case 'checkbox':\n        defaults[field.key] = false;\n        break;\n      case 'select':\n        if ('multiple' in field && field.multiple) {\n          defaults[field.key] = [];\n        } else {\n          defaults[field.key] = '';\n        }\n        break;\n      case 'number':\n        defaults[field.key] = undefined;\n        break;\n      default:\n        defaults[field.key] = '';\n    }\n  });\n\n  return defaults;\n}","'use client';\n\nimport React from 'react';\nimport { Input } from '../ui/input';\nimport { BaseField } from './BaseField';\nimport { TextFieldConfig } from '../../lib/types';\nimport { cn } from '../../lib/utils';\n\ninterface TextFieldProps {\n  config: TextFieldConfig;\n  value: string;\n  onChange: (value: string) => void;\n  error?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport function TextField({\n  config,\n  value,\n  onChange,\n  error,\n  disabled,\n  className,\n}: TextFieldProps) {\n  const {\n    key,\n    type,\n    placeholder,\n    maxLength,\n    minLength,\n    pattern,\n    autoFocus,\n  } = config;\n\n  return (\n    <BaseField config={config} error={error} className={className}>\n      <Input\n        id={key}\n        name={key}\n        type={type}\n        value={value || ''}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          onChange(e.target.value)\n        }\n        placeholder={placeholder}\n        maxLength={maxLength}\n        minLength={minLength}\n        pattern={pattern}\n        autoFocus={autoFocus}\n        disabled={disabled}\n        className={cn(error && 'border-destructive focus-visible:ring-destructive')}\n        aria-invalid={error ? 'true' : 'false'}\n        aria-describedby={error ? `${key}-error` : undefined}\n      />\n\n      {/* Character count */}\n      {maxLength && (\n        <div className=\"flex justify-end\">\n          <span className=\"text-muted-foreground text-xs\">\n            {(value || '').length} / {maxLength}\n          </span>\n        </div>\n      )}\n    </BaseField>\n  );\n}","import * as React from 'react';\n\nimport { cn } from '../../lib/utils';\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n","'use client';\n\nimport React from 'react';\nimport { cn } from '../../lib/utils';\nimport { FieldConfig } from '../../lib/types';\n\ninterface BaseFieldProps {\n  config: FieldConfig;\n  error?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function BaseField({\n  config,\n  error,\n  children,\n  className,\n}: BaseFieldProps) {\n  const { label, description, required } = config;\n\n  return (\n    <div className={cn('space-y-2', className)}>\n      {/* Label */}\n      {label && (\n        <label\n          htmlFor={config.key}\n          className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n        >\n          {label}\n          {required && <span className=\"text-destructive ml-1\">*</span>}\n        </label>\n      )}\n\n      {/* Description */}\n      {description && (\n        <p className=\"text-muted-foreground text-sm\">{description}</p>\n      )}\n\n      {/* Field */}\n      <div className=\"space-y-1\">\n        {children}\n\n        {/* Error message */}\n        {error && (\n          <p className=\"text-destructive text-sm font-medium\" role=\"alert\">\n            {error}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { Textarea } from '../ui/textarea';\nimport { BaseField } from './BaseField';\nimport { TextAreaFieldConfig } from '../../lib/types';\nimport { cn } from '../../lib/utils';\n\ninterface TextAreaFieldProps {\n  config: TextAreaFieldConfig;\n  value: string;\n  onChange: (value: string) => void;\n  error?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport function TextAreaField({\n  config,\n  value,\n  onChange,\n  error,\n  disabled,\n  className,\n}: TextAreaFieldProps) {\n  const { key, placeholder, maxLength, rows = 3, autoFocus } = config;\n\n  return (\n    <BaseField config={config} error={error} className={className}>\n      <Textarea\n        id={key}\n        name={key}\n        value={value || ''}\n        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n          onChange(e.target.value)\n        }\n        placeholder={placeholder}\n        maxLength={maxLength}\n        rows={rows}\n        autoFocus={autoFocus}\n        disabled={disabled}\n        className={cn(\n          'resize-vertical min-h-[400px] text-base leading-relaxed',\n          error && 'border-destructive focus-visible:ring-destructive'\n        )}\n        aria-invalid={error ? 'true' : 'false'}\n        aria-describedby={error ? `${key}-error` : undefined}\n      />\n\n      {/* Character count */}\n      {maxLength && (\n        <div className=\"flex justify-end\">\n          <span className=\"text-muted-foreground text-xs\">\n            {(value || '').length} / {maxLength}\n          </span>\n        </div>\n      )}\n    </BaseField>\n  );\n}","import * as React from 'react';\n\nimport { cn } from '../../lib/utils';\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Textarea };\n","'use client';\n\nimport React, { useState, KeyboardEvent } from 'react';\nimport { Input } from '../ui/input';\nimport { Badge } from '../ui/badge';\nimport { BaseField } from './BaseField';\nimport { TagsFieldConfig } from '../../lib/types';\nimport { cn } from '../../lib/utils';\nimport { X } from 'lucide-react';\n\ninterface TagFieldProps {\n  config: TagsFieldConfig;\n  value: string[];\n  onChange: (value: string[]) => void;\n  error?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport function TagField({\n  config,\n  value = [],\n  onChange,\n  error,\n  disabled,\n  className,\n}: TagFieldProps) {\n  const [inputValue, setInputValue] = useState('');\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  const {\n    key,\n    placeholder,\n    maxTags,\n    allowCustomTags = true,\n    suggestions = [],\n  } = config;\n\n  const availableSuggestions = suggestions.filter(\n    (suggestion) =>\n      !value.includes(suggestion) &&\n      suggestion.toLowerCase().includes(inputValue.toLowerCase())\n  );\n\n  const addTag = (tag: string) => {\n    const trimmedTag = tag.trim();\n    if (!trimmedTag) return;\n\n    if (value.includes(trimmedTag)) return;\n\n    if (maxTags && value.length >= maxTags) return;\n\n    onChange([...value, trimmedTag]);\n    setInputValue('');\n    setShowSuggestions(false);\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    onChange(value.filter((tag) => tag !== tagToRemove));\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      if (allowCustomTags) {\n        addTag(inputValue);\n      }\n    } else if (e.key === 'Backspace' && !inputValue && value.length > 0) {\n      // Remove last tag if backspace is pressed and input is empty\n      removeTag(value[value.length - 1]);\n    } else if (e.key === 'Escape') {\n      setShowSuggestions(false);\n      setInputValue('');\n    }\n  };\n\n  const handleInputChange = (newValue: string) => {\n    setInputValue(newValue);\n    setShowSuggestions(newValue.length > 0 && availableSuggestions.length > 0);\n  };\n\n  return (\n    <BaseField config={config} error={error} className={className}>\n      <div className=\"space-y-2\">\n        {/* Tags display */}\n        {value.length > 0 && (\n          <div className=\"flex flex-wrap gap-2\">\n            {value.map((tag, index) => (\n              <Badge\n                key={`${tag}-${index}`}\n                variant=\"secondary\"\n                className=\"flex items-center gap-1 px-2 py-1 text-sm\"\n              >\n                <span>{tag}</span>\n                {!disabled && (\n                  <button\n                    type=\"button\"\n                    onClick={() => removeTag(tag)}\n                    className=\"hover:bg-muted-foreground/20 ml-1 flex h-3 w-3 items-center justify-center rounded-full\"\n                    aria-label={`Remove ${tag} tag`}\n                  >\n                    <X className=\"h-2 w-2\" />\n                  </button>\n                )}\n              </Badge>\n            ))}\n          </div>\n        )}\n\n        {/* Input */}\n        <div className=\"relative\">\n          <Input\n            id={key}\n            name={key}\n            value={inputValue}\n            onChange={(e) => handleInputChange(e.target.value)}\n            onKeyDown={handleKeyDown}\n            onFocus={() =>\n              setShowSuggestions(\n                inputValue.length > 0 && availableSuggestions.length > 0\n              )\n            }\n            onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n            placeholder={\n              maxTags && value.length >= maxTags\n                ? `Maximum ${maxTags} tags reached`\n                : placeholder || 'Type and press Enter to add tags'\n            }\n            disabled={disabled || (maxTags ? value.length >= maxTags : false)}\n            className={cn(\n              error && 'border-destructive focus-visible:ring-destructive'\n            )}\n            aria-invalid={error ? 'true' : 'false'}\n            aria-describedby={error ? `${key}-error` : undefined}\n          />\n\n          {/* Suggestions dropdown */}\n          {showSuggestions && availableSuggestions.length > 0 && (\n            <div className=\"bg-popover border-border absolute z-10 mt-1 max-h-48 w-full overflow-auto rounded-md border shadow-md\">\n              {availableSuggestions.slice(0, 8).map((suggestion) => (\n                <button\n                  key={suggestion}\n                  type=\"button\"\n                  className=\"hover:bg-accent hover:text-accent-foreground w-full px-3 py-2 text-left text-sm\"\n                  onClick={() => addTag(suggestion)}\n                >\n                  {suggestion}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Tag count indicator */}\n        {maxTags && (\n          <div className=\"flex justify-end\">\n            <span className=\"text-muted-foreground text-xs\">\n              {value.length} / {maxTags} tags\n            </span>\n          </div>\n        )}\n      </div>\n    </BaseField>\n  );\n}","import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '../../lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span';\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n","'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Plus, Trash2, ExternalLink } from 'lucide-react';\nimport { LinksFieldConfig, LinkObject } from '../../lib/types';\n\ninterface LinksFieldProps {\n  config: LinksFieldConfig;\n  value: LinkObject[];\n  onChange: (value: LinkObject[]) => void;\n  error?: string;\n  disabled?: boolean;\n}\n\nexport function LinksField({\n  config,\n  value = [],\n  onChange,\n  error,\n  disabled = false,\n}: LinksFieldProps) {\n  const [newUrl, setNewUrl] = useState('');\n\n  const addLink = () => {\n    if (!newUrl.trim()) return;\n\n    const updatedLinks = [...value, { url: newUrl, title: '', description: '' }];\n    onChange(updatedLinks);\n    setNewUrl('');\n  };\n\n  const removeLink = (index: number) => {\n    const updatedLinks = value.filter((_, i) => i !== index);\n    onChange(updatedLinks);\n  };\n\n  const updateLink = (index: number, field: keyof LinkObject, newValue: string) => {\n    const updatedLinks = value.map((link, i) =>\n      i === index ? { ...link, [field]: newValue } : link\n    );\n    onChange(updatedLinks);\n  };\n\n  const maxLinks = config.maxLinks || 10;\n  const canAddMore = value.length < maxLinks;\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <Label htmlFor={config.key}>\n          {config.label}\n          {config.required && <span className=\"text-destructive ml-1\">*</span>}\n        </Label>\n        {config.description && (\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            {config.description}\n          </p>\n        )}\n      </div>\n\n      {/* Existing Links */}\n      {value.length > 0 && (\n        <div className=\"space-y-3\">\n          {value.map((link, index) => (\n            <div key={index} className=\"border rounded-lg p-3 space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <ExternalLink className=\"h-4 w-4\" />\n                  <span className=\"font-medium text-sm\">Link {index + 1}</span>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeLink(index)}\n                  disabled={disabled}\n                  className=\"h-8 w-8 p-0 text-muted-foreground hover:text-destructive\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <div>\n                <Input\n                  type=\"url\"\n                  value={link.url}\n                  onChange={(e) => updateLink(index, 'url', e.target.value)}\n                  disabled={disabled}\n                  placeholder=\"https://example.com\"\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Add New Link */}\n      {canAddMore && (\n        <div className=\"border border-dashed rounded-lg p-3 space-y-3\">\n          <div className=\"flex gap-2\">\n            <Input\n              type=\"url\"\n              value={newUrl}\n              onChange={(e) => setNewUrl(e.target.value)}\n              disabled={disabled}\n              placeholder=\"https://example.com\"\n              className=\"flex-1\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={addLink}\n              disabled={disabled || !newUrl.trim()}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {!canAddMore && (\n        <p className=\"text-sm text-muted-foreground\">\n          Maximum {maxLinks} links allowed\n        </p>\n      )}\n\n      {error && (\n        <p className=\"text-sm text-destructive\">{error}</p>\n      )}\n    </div>\n  );\n}","'use client';\n\nimport * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\n\nimport { cn } from '../../lib/utils';\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Label };\n","'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Upload, Image as ImageIcon, Trash2 } from 'lucide-react';\nimport { ImagesFieldConfig, ImageObject } from '../../lib/types';\n\ninterface ImagesFieldProps {\n  config: ImagesFieldConfig;\n  value: ImageObject[];\n  onChange: (value: ImageObject[]) => void;\n  error?: string;\n  disabled?: boolean;\n}\n\nexport function ImagesField({\n  config,\n  value = [],\n  onChange,\n  error,\n  disabled = false,\n}: ImagesFieldProps) {\n  const [newImageUrl, setNewImageUrl] = useState('');\n\n  const maxFiles = config.maxFiles || 5;\n  const canAddMore = value.length < maxFiles;\n\n  const addImage = () => {\n    if (!newImageUrl.trim()) return;\n\n    const newImage: ImageObject = {\n      url: newImageUrl,\n      alt: '',\n      caption: '',\n    };\n\n    onChange([...value, newImage]);\n    setNewImageUrl('');\n  };\n\n  const removeImage = (index: number) => {\n    const updatedImages = value.filter((_, i) => i !== index);\n    onChange(updatedImages);\n  };\n\n  const updateImageCaption = (index: number, caption: string) => {\n    const updatedImages = value.map((img, i) =>\n      i === index ? { ...img, caption } : img\n    );\n    onChange(updatedImages);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <Label htmlFor={config.key}>\n          {config.label}\n          {config.required && <span className=\"text-destructive ml-1\">*</span>}\n        </Label>\n        {config.description && (\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            {config.description}\n          </p>\n        )}\n      </div>\n\n      {/* Existing Images */}\n      {value.length > 0 && (\n        <div className=\"space-y-3\">\n          {value.map((image, index) => (\n            <div key={index} className=\"border rounded-lg p-3 space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <ImageIcon className=\"h-4 w-4\" />\n                  <span className=\"font-medium text-sm\">Image {index + 1}</span>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeImage(index)}\n                  disabled={disabled}\n                  className=\"h-8 w-8 p-0 text-muted-foreground hover:text-destructive\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              {/* Image URL Display */}\n              <div>\n                <Input\n                  type=\"url\"\n                  value={image.url}\n                  disabled\n                  placeholder=\"Image URL\"\n                />\n              </div>\n\n              {/* Caption */}\n              {config.allowCaptions && (\n                <div>\n                  <Label className=\"text-xs\">Caption (Optional)</Label>\n                  <Input\n                    value={image.caption || ''}\n                    onChange={(e) => updateImageCaption(index, e.target.value)}\n                    disabled={disabled}\n                    placeholder=\"Image caption\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Add New Image */}\n      {canAddMore && (\n        <div className=\"border border-dashed rounded-lg p-4\">\n          <div className=\"flex flex-col items-center justify-center text-center space-y-3\">\n            <Upload className=\"h-8 w-8 text-muted-foreground\" />\n            <div>\n              <p className=\"text-sm font-medium\">Add Image URL</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Note: File upload coming soon. For now, add image URLs.\n              </p>\n            </div>\n            <div className=\"flex gap-2 w-full max-w-md\">\n              <Input\n                type=\"url\"\n                value={newImageUrl}\n                onChange={(e) => setNewImageUrl(e.target.value)}\n                disabled={disabled}\n                placeholder=\"https://example.com/image.jpg\"\n                className=\"flex-1\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={addImage}\n                disabled={disabled || !newImageUrl.trim()}\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {!canAddMore && (\n        <p className=\"text-sm text-muted-foreground\">\n          Maximum {maxFiles} images allowed\n        </p>\n      )}\n\n      {error && (\n        <p className=\"text-sm text-destructive\">{error}</p>\n      )}\n    </div>\n  );\n}","'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Check, ChevronDown, Plus, FolderOpen } from 'lucide-react';\nimport { ProjectSelectFieldConfig } from '../../lib/types';\n\ninterface ProjectSelectFieldProps {\n  config: ProjectSelectFieldConfig;\n  value: string;\n  onChange: (value: string) => void;\n  error?: string;\n  disabled?: boolean;\n  // Optional props for Supabase integration\n  supabaseClient?: any;\n  user?: any;\n}\n\ninterface Project {\n  id: number;\n  project_name: string;\n  description?: string;\n}\n\nexport function ProjectSelectField({\n  config,\n  value,\n  onChange,\n  error,\n  disabled = false,\n  supabaseClient,\n  user,\n}: ProjectSelectFieldProps) {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [customValue, setCustomValue] = useState('');\n  const [showCustomInput, setShowCustomInput] = useState(false);\n\n  // Load projects on mount if Supabase is available\n  useEffect(() => {\n    if (supabaseClient && user) {\n      loadProjects();\n    }\n  }, [user, supabaseClient]);\n\n  const loadProjects = async () => {\n    if (!supabaseClient || !user) return;\n\n    setLoading(true);\n    try {\n      const { data, error } = await supabaseClient\n        .from('projects')\n        .select('id, project_name, description')\n        .eq('user_id', user.id)\n        .order('project_name');\n\n      if (error) throw error;\n      setProjects(data || []);\n    } catch (error) {\n      console.error('Error loading projects:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectProject = (projectName: string) => {\n    onChange(projectName);\n    setIsOpen(false);\n    setShowCustomInput(false);\n  };\n\n  const handleCustomSubmit = () => {\n    if (customValue.trim()) {\n      onChange(customValue.trim());\n      setCustomValue('');\n      setShowCustomInput(false);\n      setIsOpen(false);\n    }\n  };\n\n  const selectedProject = projects.find(p => p.project_name === value);\n  const allowCustom = config.allowCustom !== false;\n\n  return (\n    <div className=\"space-y-2\">\n      <div>\n        <Label htmlFor={config.key}>\n          {config.label}\n          {config.required && <span className=\"text-destructive ml-1\">*</span>}\n        </Label>\n        {config.description && (\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            {config.description}\n          </p>\n        )}\n      </div>\n\n      <div className=\"relative\">\n        {/* Selected Value Display */}\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() => setIsOpen(!isOpen)}\n          disabled={disabled || loading}\n          className=\"w-full justify-between h-10 px-3\"\n        >\n          <div className=\"flex items-center gap-2\">\n            <FolderOpen className=\"h-4 w-4\" />\n            <span className={value ? 'text-foreground' : 'text-muted-foreground'}>\n              {value || config.placeholder || 'Select a project'}\n            </span>\n          </div>\n          <ChevronDown className={`h-4 w-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />\n        </Button>\n\n        {/* Dropdown */}\n        {isOpen && (\n          <div className=\"absolute top-full left-0 right-0 z-50 mt-1 max-h-60 overflow-auto bg-popover border rounded-md shadow-md\">\n            <div className=\"p-0\">\n              {loading ? (\n                <div className=\"p-3 text-center text-sm text-muted-foreground\">\n                  Loading projects...\n                </div>\n              ) : (\n                <>\n                  {/* Clear Selection */}\n                  {value && (\n                    <button\n                      type=\"button\"\n                      onClick={() => selectProject('')}\n                      className=\"w-full px-3 py-2 text-left text-sm hover:bg-accent transition-colors border-b\"\n                    >\n                      <span className=\"text-muted-foreground\">Clear selection</span>\n                    </button>\n                  )}\n\n                  {/* Project List */}\n                  {projects.length > 0 ? (\n                    projects.map((project) => (\n                      <button\n                        key={project.id}\n                        type=\"button\"\n                        onClick={() => selectProject(project.project_name)}\n                        className=\"w-full px-3 py-2 text-left hover:bg-accent transition-colors flex items-center justify-between\"\n                      >\n                        <div>\n                          <div className=\"font-medium text-sm\">\n                            {project.project_name}\n                          </div>\n                          {project.description && (\n                            <div className=\"text-xs text-muted-foreground truncate\">\n                              {project.description}\n                            </div>\n                          )}\n                        </div>\n                        {value === project.project_name && (\n                          <Check className=\"h-4 w-4 text-primary\" />\n                        )}\n                      </button>\n                    ))\n                  ) : (\n                    <div className=\"p-3 text-center text-sm text-muted-foreground\">\n                      No projects found\n                    </div>\n                  )}\n\n                  {/* Custom Project Input */}\n                  {allowCustom && (\n                    <>\n                      <div className=\"border-t\">\n                        {showCustomInput ? (\n                          <div className=\"p-3 space-y-2\">\n                            <Input\n                              value={customValue}\n                              onChange={(e) => setCustomValue(e.target.value)}\n                              placeholder=\"Enter project name\"\n                              onKeyPress={(e) => e.key === 'Enter' && handleCustomSubmit()}\n                              autoFocus\n                            />\n                            <div className=\"flex gap-2\">\n                              <Button\n                                type=\"button\"\n                                size=\"sm\"\n                                onClick={handleCustomSubmit}\n                                disabled={!customValue.trim()}\n                              >\n                                Add\n                              </Button>\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setShowCustomInput(false);\n                                  setCustomValue('');\n                                }}\n                              >\n                                Cancel\n                              </Button>\n                            </div>\n                          </div>\n                        ) : (\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowCustomInput(true)}\n                            className=\"w-full px-3 py-2 text-left text-sm hover:bg-accent transition-colors flex items-center gap-2\"\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                            <span>Add custom project</span>\n                          </button>\n                        )}\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Selected Project Info */}\n      {selectedProject && (\n        <div className=\"text-xs text-muted-foreground\">\n          {selectedProject.description && (\n            <span>📝 {selectedProject.description}</span>\n          )}\n        </div>\n      )}\n\n      {error && (\n        <p className=\"text-sm text-destructive\">{error}</p>\n      )}\n\n      {/* Click outside to close */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setIsOpen(false)}\n        />\n      )}\n    </div>\n  );\n}","\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","import { FormSchema } from '../types';\n\n/**\n * Form schema configuration for the noted table\n */\nexport const notedFormSchema: FormSchema = {\n  title: '',\n  description: '',\n  table: 'noted',\n  submitText: 'Noted',\n  resetText: 'Clear Note',\n  successMessage: 'Note saved successfully!',\n  autoFields: {\n    user_id: true,\n    created_at: true,\n    updated_at: true,\n  },\n  fields: [\n    {\n      key: 'title',\n      label: '',\n      type: 'text',\n      required: true,\n      placeholder: 'consider it...',\n      maxLength: 255,\n      autoFocus: true,\n    },\n    {\n      key: 'description',\n      label: '',\n      type: 'textarea',\n      required: true,\n      placeholder: 'noted...',\n      rows: 15,\n      maxLength: 10000,\n    },\n    {\n      key: 'project_name',\n      label: 'Project',\n      type: 'project-select',\n      required: false,\n      placeholder: 'Select or enter a project name',\n      allowCustom: true,\n    },\n    {\n      key: 'tags',\n      label: 'Tags',\n      type: 'tags',\n      required: false,\n      placeholder: 'Add tags (press Enter to add)',\n      maxTags: 10,\n      allowCustomTags: true,\n      suggestions: [\n        'bug',\n        'feature',\n        'research',\n        'todo',\n        'meeting',\n        'idea',\n        'important',\n        'urgent',\n        'documentation',\n        'testing',\n        'deployment',\n        'security',\n        'performance',\n        'ui',\n        'ux',\n        'api',\n        'database',\n        'frontend',\n        'backend',\n        'mobile',\n        'web',\n        'design',\n        'review',\n        'feedback',\n        'question',\n      ],\n    },\n    {\n      key: 'links',\n      label: 'Links',\n      type: 'links',\n      required: false,\n      maxLinks: 10,\n      allowTitleEdit: true,\n      allowDescriptionEdit: true,\n    },\n    {\n      key: 'images',\n      label: 'Images',\n      type: 'images',\n      required: false,\n      maxFiles: 5,\n      maxFileSize: 5 * 1024 * 1024, // 5MB\n      allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],\n      allowCaptions: true,\n    },\n    {\n      key: 'screenshots',\n      label: 'Screenshots',\n      type: 'images', // Reuse images field type\n      required: false,\n      maxFiles: 5,\n      maxFileSize: 5 * 1024 * 1024, // 5MB\n      allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],\n      allowCaptions: true,\n    },\n  ],\n};\n\n/**\n * Get noted form schema with custom configuration\n */\nexport function getNotedFormSchema(\n  overrides?: Partial<FormSchema>\n): FormSchema {\n  return {\n    ...notedFormSchema,\n    ...overrides,\n    fields: overrides?.fields || notedFormSchema.fields,\n  };\n}\n\n/**\n * Get noted form schema for editing existing notes\n */\nexport function getNotedEditFormSchema(): FormSchema {\n  return getNotedFormSchema({\n    title: 'Edit Note',\n    description: 'Update your note with new information or corrections.',\n    submitText: 'Update Note',\n    successMessage: 'Note updated successfully!',\n  });\n}"],"mappings":"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","names":["import_react","import_react","import_zod","import_react","React","React","React","import_react","React","React","import_react","React","import_react_slot","import_class_variance_authority","React","import_react","React","import_lucide_react","React","import_react","import_lucide_react","React","ImageIcon","import_react","import_lucide_react","error","React","import_lucide_react","React","import_lucide_react","React","React"]}